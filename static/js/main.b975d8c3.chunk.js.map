{"version":3,"sources":["components/Statistics/statistics.module.css","components/Section/section.module.css","components/FeedbackOptions/feedbackOptions.module.css","components/Notification/notification.module.css","components/Section/Section.jsx","components/Statistics/Statistics.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Notification/Notification.jsx","App.jsx","index.js"],"names":["module","exports","Section","title","children","className","styles","section","Statistics","good","neutral","bad","total","positiveFeedback","stats","statisticsList","FeedbackOptions","options","onLeaveFeedback","map","option","button","onClick","Notification","message","App","state","handleFeedback","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","Object","keys","this","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gIACAA,EAAOC,QAAU,CAAC,MAAQ,0BAA0B,eAAiB,qC,oBCArED,EAAOC,QAAU,CAAC,QAAU,2B,gBCA5BD,EAAOC,QAAU,CAAC,OAAS,kC,gBCA3BD,EAAOC,QAAU,CAAC,QAAU,gC,qKCcbC,EAZC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,sBAAKC,UAAWC,IAAOC,QAAvB,UACE,6BAAKJ,IACJC,M,gBC8BUI,EAhCI,SAAC,GAQb,IAPLC,EAOI,EAPJA,KACAC,EAMI,EANJA,QACAC,EAKI,EALJA,IACAC,EAII,EAJJA,MACAC,EAGI,EAHJA,iBAMA,OACE,qBAAKR,UAAWC,IAAOQ,MAAvB,SACE,qBAAIT,UAAWC,IAAOS,eAAtB,UACE,wCAAWN,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,qDAAwBC,EAAxB,a,gBCGOG,EArBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,8BACGD,EAAQE,KAAI,SAAAC,GAAM,OACjB,wBACEf,UAAWC,IAAOe,OAElBC,QAAS,WACPJ,EAAgBE,IAJpB,SAOGA,GALIA,S,iBCFEG,EAJM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACnB,oBAAInB,UAAWC,IAAOkB,QAAtB,SAAgCA,KCsDnBC,E,4MAlDbC,MAAQ,CACNjB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPgB,eAAiB,SAAAP,GACf,EAAKQ,UAAS,SAAAC,GACZ,OAAO,eACJT,EAASS,EAAUT,GAAU,O,EAKpCU,mBAAqB,WACnB,OAAO,EAAKJ,MAAMjB,KAAO,EAAKiB,MAAMhB,QAAU,EAAKgB,MAAMf,K,EAG3DoB,gCAAkC,WAChC,OAAOC,KAAKC,MAAyB,IAAlB,EAAKP,MAAMjB,KAAc,EAAKqB,uB,4CAGnD,WACE,OACE,sBAAKzB,UAAU,MAAf,UACE,cAAC,EAAD,CAASF,MAAM,wBAAf,SACE,cAAC,EAAD,CACEc,QAASiB,OAAOC,KAAKC,KAAKV,OAC1BR,gBAAiBkB,KAAKT,mBAI1B,cAAC,EAAD,CAASxB,MAAM,aAAf,SACGiC,KAAKN,qBACJ,cAAC,EAAD,CACErB,KAAM2B,KAAKV,MAAMjB,KACjBC,QAAS0B,KAAKV,MAAMhB,QACpBC,IAAKyB,KAAKV,MAAMf,IAChBC,MAAOwB,KAAKN,qBACZjB,iBAAkBuB,KAAKL,oCAGzB,cAAC,EAAD,CAAcP,QAAQ,+B,GA3ChBa,IAAMC,WCHxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b975d8c3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"stats\":\"statistics_stats__CytMP\",\"statisticsList\":\"statistics_statisticsList__M_yyq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"section_section__2Amvn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"feedbackOptions_button__18zGo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"notification_message__GqO4J\"};","import styles from './section.module.css';\nimport PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => (\n  <div className={styles.section}>\n    <h2>{title}</h2>\n    {children}\n  </div>\n);\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","// import PropTypes from 'prop-types';\nimport styles from './statistics.module.css';\nimport PropTypes from 'prop-types';\n\nconst Statistics = ({\n  good,\n  neutral,\n  bad,\n  total,\n  positiveFeedback,\n  // countTotalFeedback,\n  // countPositiveFeedbackPercentage,\n}) => {\n  // const total = countTotalFeedback();\n  // const positiveFeedback = countPositiveFeedbackPercentage();\n  return (\n    <div className={styles.stats}>\n      <ul className={styles.statisticsList}>\n        <li>Good: {good}</li>\n        <li>Neutral: {neutral}</li>\n        <li>Bad: {bad}</li>\n        <li>Total: {total}</li>\n        <li>Positive Feedback: {positiveFeedback}%</li>\n      </ul>\n    </div>\n  );\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positiveFeedback: PropTypes.number,\n};\n\nexport default Statistics;\n","// import PropTypes from 'prop-types';\nimport styles from './feedbackOptions.module.css';\nimport PropTypes from 'prop-types';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\n  <div>\n    {options.map(option => (\n      <button\n        className={styles.button}\n        key={option}\n        onClick={() => {\n          onLeaveFeedback(option);\n        }}\n      >\n        {option}\n      </button>\n    ))}\n  </div>\n);\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import styles from './notification.module.css';\nimport PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => (\n  <h2 className={styles.message}>{message}</h2>\n);\n\nexport default Notification;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport './styles.css';\nimport Section from './components/Section/Section';\nimport Statistics from './components/Statistics/Statistics';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Notification from './components/Notification/Notification';\n\nclass App extends React.Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleFeedback = option => {\n    this.setState(prevState => {\n      return {\n        [option]: prevState[option] + 1,\n      };\n    });\n  };\n\n  countTotalFeedback = () => {\n    return this.state.good + this.state.neutral + this.state.bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    return Math.round((this.state.good * 100) / this.countTotalFeedback());\n  };\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Section title=\"Please leave Feedback\">\n          <FeedbackOptions\n            options={Object.keys(this.state)}\n            onLeaveFeedback={this.handleFeedback}\n          />\n        </Section>\n\n        <Section title=\"Statistics\">\n          {this.countTotalFeedback() ? (\n            <Statistics\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={this.countTotalFeedback()}\n              positiveFeedback={this.countPositiveFeedbackPercentage()}\n            />\n          ) : (\n            <Notification message=\"No feedback given\"></Notification>\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}